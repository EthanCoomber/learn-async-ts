The flow of execution in this example is different from examples using the fetch() API.

In this example with sum2DArray(), the code executes synchronously within the Promise executor function. 
Even though we're using a Promise, the actual computation happens immediately and blocking:

1. When sum2DArray() is called, it creates a new Promise
2. The Promise executor function runs synchronously, calculating the sum immediately
3. Only after the sum is calculated does it call resolve() with the result
4. The console.log statements show this synchronous execution - we see "Sum called" followed immediately by all the "Adding X to sum" logs

In contrast, with the fetch() API:

1. When fetch() is called, it returns a Promise but immediately delegates the actual HTTP request to the browser's networking APIs
2. The Promise executor function returns right away, allowing other code to run
3. The actual HTTP request happens asynchronously in the background
4. Only when the network request completes does the Promise resolve with the response

This is why fetch() is truly asynchronous - it doesn't block the main thread while waiting for the network.
Our sum2DArray() example, while using Promises, is still executing synchronously and blocking the main thread
during the calculation.

To make sum2DArray() truly asynchronous like fetch(), we would need to delegate the work to another thread
or use async APIs like setTimeout() to defer the computation.